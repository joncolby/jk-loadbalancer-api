import org.apache.jk.status.*
import org.hibernate.FetchMode as FM
import groovy.sql.Sql

import org.codehaus.groovy.grails.commons.*

import org.gparallelizer.*

/**
 * Scan all Apache frontend mod_jk loadbalancer
 * Todo: Add Testcases
 * Todo: Is a service a better way to implement this?

 */
class ApacheFrontendScannerJob{
  
    static triggers = {
    	simple name:'simpleTrigger', startDelay:1000, repeatCount: 1
//    	cron name:'cronTrigger',  cronExpression: '0 0/1 * * * ?'
		cron name:'cronTrigger',  cronExpression: '* * * * * ?'

     }
    
    
    def config = ConfigurationHolder.config
    
    def sessionRequired = true
    // def sessionRequired = false
    def int count = 9
    def int processUpdateFrequency = 10
    def concurrent = false
    def JkService jkService
    def concurrentScans = Integer.parseInt(config.frontscanner.parallelThreads)
    //def concurrentScans = 10
    def sessionFactory

    def dataSource
    
    def frontlist
    
    def execute() {
    	
    	sessionFactory.currentSession.flush()
    	
    	log.info "starting quartz job at " + new Date()
    	
        count = (count + 1) % processUpdateFrequency

        frontlist = ApacheFrontend.list(max:concurrentScans,sort:"lastUpdated",order:"asc")
 
        List jkstatuses
        
        Parallelizer.withParallelizer(concurrentScans) {
    	  
        	jkstatuses = frontlist.collectAsync { frontend ->
        		try {
        		log.info "starting data collection for " + frontend.name + " "  + new Date()
        		JkStatus jkstatus = jkService.jkStatus(frontend.jkstatusURL,frontend.user,frontend.password)
        	    log.info "finished data collection for " + frontend.name + " "  + new Date()
        		return jkstatus
        		} catch (Exception e) {
        			return null
        		}
        		
    	  }

      }
       
 
    // update lastupdated by hand since it doesnt get updated if nothing changes
	frontlist.each { ApacheFrontend front ->
		log.info "updating timestamp for " + front.name
		def sql = new Sql(dataSource)
		sql.executeUpdate("update apache_frontend set last_updated = ? where id = ?",[new Date(),front.id])
	}	


// println "statuses: " + jkstatuses

  	jkstatuses.each { jkstatus ->

		if (jkstatus)  {
  			
  		def name = jkstatus.server.name
  		
  		//def frontend = ApacheFrontend.findByJkstatusURLLike("%//$ip/%")
  		def frontend = ApacheFrontend.findByNameLike("$name%")
  		
  		log.info 'Analyse JK Status ' + frontend.name
                
                jkstatus.balancers.each{ balancer ->
                
                log.info frontend.name + " " + balancer.name
                def lb = ModJkLoadbalancer.findByFrontendAndName(frontend,balancer.name)

                
                //frontend.jkversion =  jkstatus.software.jk_version
                //frontend = frontend.merge()
                //frontend.save(flush:true)
                
                // X
                frontend.jkversion =  jkstatus.software.jk_version
                frontend.save()
                
                
                if(lb == null) {
                    lb = new ModJkLoadbalancer(name:balancer.name)
                    lb.frontend = frontend
                    //lb = lb.merge()
                    //lb.save(flush:true)
                    
                    // X
                    lb.save()
                } 
                // else { // Update Attributes }
                def  members = balancer.members
                members.each{ JkBalancerMember member ->
                
                	if ( member.host =~ /\./)
                		member.host = member.host.split(/\./)[0]
                	
                    ModJkWorker worker = ModJkWorker.findByLoadbalancerAndName(lb,member.name)
                    if(worker == null) {
                        worker = new ModJkWorker(
                                name:member.name,
                                route:member.route,
                                host:member.host,
                                address:member.address,
                                port:member.port,
                                activation:member.activation,
                                state:member.state
                        )
                        worker.loadbalancer = lb
                        // TODO
                        /*
                        TomcatInstance instance = TomcatInstance.findByName(member.route)
                        worker.instance = instance
                        */

                    } else {
                         worker.route=member.route
                         worker.host=member.host
                         worker.address=member.address
                         worker.port=member.port
                         worker.activation=member.activation
                         worker.state=member.state
                         // TODO
                         /*
                         if(worker.instance == null || member.route != worker.instance?.name) {
                            TomcatInstance instance = TomcatInstance.findByName(member.route)
                            worker.instance = instance
                         }
                         */
                    }
                    
                 
   /* NO STATISTICS LOGGING -- slows down job, especially when table is big */                 
 /*
                    if (count == 0) {
                        def ModJkWorkerStatistic stats = new ModJkWorkerStatistic()
                        stats.errorCounter = member.errors
                        stats.accessCounter = member.elected
                        stats.clientErrors = member.client_errors
                        stats.readBytes = member.readed
                        stats.writeBytes = member.transferred
                        stats.busyConnections = member.busy
                        stats.worker = worker
                        worker.addToStatistics(stats)
                        //stats.save()
                    }
*/

                    //worker = worker.merge()
                    //worker.save(flush:true)
                    
                    // X
                    worker.save()
                    
                    log.info "${frontend.name} - ${member.name} - ${member.route}"
                   
                    // X
                    //sessionFactory.currentSession.flush()
                }
                
            } // loop through balancers

        } // if jkstatus is not null
            
        } // loop through list of frontends

    } // close execute
} // close class
